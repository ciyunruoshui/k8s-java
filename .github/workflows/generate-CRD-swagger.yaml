name: CRD Swagger Java Model Generate
on:
  workflow_dispatch:
    inputs:
      swagger:
        type: string
        required: true
        description: 'Comma-separated paths to swagger of CRD  sources, can be either HTTP url or local file path.'
      generatingJavaPackage:
        type: string
        required: true
        description: 'The package name of the generated java project.'
      crdApiGroupPrefix:
        type: string
        required: false
        description: 'The prefix of the target CRDs api group to generate. (Optional)'

env:
  IMAGE_NAME: registry.cn-hangzhou.aliyuncs.com/chen-ali/gchr
  IMAGE_TAG: kubernetes-java-crd-model-genv1.1.0
  GEN_DIR: crd-gen

permissions:
  contents: read

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run CRD Model Generation
        run: |
          mkdir -p ${GEN_DIR}
          read CRD_SRC_ARGS < <(echo '${{ github.event.inputs.swagger }}')
          test -z ${{ github.event.inputs.crdApiGroupPrefix }} || export CRD_API_GROUP_ARGS="-n ${{ github.event.inputs.crdApiGroupPrefix }}"
          echo "CRD Src Args: ${CRD_SRC_ARGS}"
          echo "CRD Api Group Prefix Args: ${CRD_API_GROUP_ARGS}"
          curl -o $(pwd)/swagger ${CRD_SRC_ARGS}
          ll $(pwd)
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v "$(pwd)/${GEN_DIR}":"$(pwd)/${GEN_DIR}" \
          -v "$(pwd)/swagger":"$(pwd)/swagger" \
          --network host \
          ${IMAGE_NAME}:${IMAGE_TAG} \
          /generatev2.sh \
          -u $(pwd)/swagger \
          -n ${{ github.event.inputs.generatingJavaPackage }} \
          -p ${{ github.event.inputs.generatingJavaPackage }} \
          -o "$(pwd)/${GEN_DIR}"
          ls -lh ${GEN_DIR}
      - uses: actions/upload-artifact@v3
        with:
          name: generated-java-crd-model
          path: |
            ${{ env.GEN_DIR }}
